import datetime
from datetime import datetime
from database.retrieveQuery import retrieveQuery
from database.retrieveQuery import getHeaders
from database.reportProblem import reportProblemMethod
from database.reportProblem import check_if_problem_existed
from database.reportProblem import check_if_problemExisted
from database.connection import mydb
import array


def stations():
  #scan stations for on/off statusP0_LST60
  # print("***********************************************************")
  problem ='7' #classification id for wrong dates is 7
  # essentialParameters=['T_SHT2X','RH_SHT2X','T','V_A1','V_A2','P0_LST60','V_AD1','V_AD2','P_MS5611','T1','P0_LST']
  essentialParameters={'T_SHT2X':'Temperature', 'RH_SHT2X':'Humidity','V_A1':'Soil Moisture','V_A2':'WindDirection','P0_LST60':'Preciptation','V_AD1':'Isolation','P_MS5611':'Pressure','T1':'Soil Temperature','P0_LST':'Wind Speed','Date':'','Time':''}
  

  sql = "SELECT `station_id` FROM `stations` WHERE `station_id` > 47 AND stationCategory='aws'" # > 49, #50
  stations_id_result = retrieveQuery(sql)
  result = stations_id_result[0]
  #print(result," result")

  list_of_tables = ['GroundNode', 'SinkNode', 'TenMeterNode', 'TwoMeterNode']
  format = "%Y-%m-%d,%H:%M:%S" #"%b %d %Y %H:%M:%S"
  

  for stationID in result: #for each station
  
    print("_______________________________________",stationID[0],"________________________________________________")
    for table in list_of_tables: #for each node on a aws
        
        sql = "select * from " +table+ " where `stationID` = " +str(stationID[0])+ " ORDER BY id  DESC limit 1"
        result = retrieveQuery(sql)
        fieldname = getHeaders(sql)
        header = fieldname[0]


        print(header[1])

        #checking date formart
        nodeData = result[0][0]

        date_string=nodeData[2]
        #print(nodeData)


        try:
          datetime.strptime(date_string, format)
          check_if_problemExisted(stationID[0],problem,table)
          print(date_string,stationID[0],problem,table)
          # print("Correct date string format.")
        except ValueError:
          #value=None
          reportProblemMethod(str(stationID[0]),table, problem, date_string)
          # print(date_string)
          # print("Date string format incorrect. It should be YYYY-MM-DD,H:M:S")
        
        # i=0

        # for value in nodeData:
        #   if header[i] in essentialParameters:

            
        #     if value:
        #       # print(value)
        #       check_if_problem_existed(str(stationID[0]),'6',table,essentialParameters[header[i]])

        #     else:
        #       reportProblemMethod(str(stationID[0]),table,'6',essentialParameters[header[i]])
        #       #print(value)
        #       # print("value is empty====", header[i])


        #   i=i+1


        sql = "select DATE, TIME from " +table+ " where `stationID` = " +str(stationID[0])+ " ORDER BY id  DESC limit 1"
        result = retrieveQuery(sql)

        try:
          datetime.strptime(date_string, format)
          dateAndTime= result[0][0]

          Time= dateAndTime[1]
          Date= dateAndTime[0]

          gatewayTime =Date+","+Time

          #print(datetime.strptime(gatewayTime,'%a %b %d %Y,%H:%M:%S'))
          #'Sun Aug 30 2020,20:26:19'


          diff=datetime.strptime(gatewayTime,'%a %b %d %Y,%H:%M:%S')-datetime.strptime(date_string,'%Y-%m-%d,%H:%M:%S')
          #print(diff.total_seconds())
          safe_Diff = 3*(3600)
          if (diff.total_seconds()) > safe_Diff:
            vDiff=round((diff.total_seconds()/3600),2)
            reportProblemMethod(str(stationID[0]),table,'3',str(vDiff))


            #stationID, problem,NodeType,Value
          else:
            vDiff=round((diff.total_seconds()/3600),2)
            check_if_problem_existed(stationID[0],'3',table,str(vDiff))



          datetime.strptime(date_string, format)
          #check_if_problem_existed(stationID[0], problem,table,date_string)
          #print("Correct date string format.")
        except ValueError:
          #value=None
          reportProblemMethod(str(stationID[0]),table, problem, date_string)

          #print("Date string format incorrect. It should be YYYY-MM-DD,H:M:S")

stations()